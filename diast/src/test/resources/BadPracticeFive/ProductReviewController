package com.salesmanager.shop.admin.controller.products;

import com.salesmanager.core.business.services.catalog.product.ProductService;
import com.salesmanager.core.business.services.catalog.product.review.ProductReviewService;
import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;
import com.salesmanager.core.business.utils.ajax.AjaxResponse;
import com.salesmanager.core.model.catalog.product.Product;
import com.salesmanager.core.model.catalog.product.review.ProductReview;
import com.salesmanager.core.model.catalog.product.review.ProductReviewDescription;
import com.salesmanager.core.model.merchant.MerchantStore;
import com.salesmanager.core.model.reference.language.Language;
import com.salesmanager.shop.admin.controller.ControllerConstants;
import com.salesmanager.shop.admin.model.web.Menu;
import com.salesmanager.shop.constants.Constants;
import com.salesmanager.shop.utils.LabelUtils;
import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

@Controller
public class ProductReviewController {

	@Inject
	LabelUtils messages;

    @Autowired(required = false)
    protected MultipartProperties defaultMultipartSettings;
	
    @PreAuthorize("hasRole('PRODUCTS')")
    @RequestMapping(value="/admin/products/reviews/remove.html", method=RequestMethod.POST)
    public @ResponseBody ResponseEntity<String> deleteProductReview(HttpServletRequest request, HttpServletResponse response, Locale locale) {
        String sReviewid = request.getParameter("reviewId");


        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);

        AjaxResponse resp = new AjaxResponse();
        final HttpHeaders httpHeaders= new HttpHeaders();
        httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);


        try {

            Long reviewId = Long.parseLong(sReviewid);


            ProductReview review = productReviewService.getById(reviewId);


            if(review==null || review.getProduct().getMerchantStore().getId().intValue()!=store.getId()) {

                resp.setStatusMessage(messages.getMessage("message.unauthorized", locale));
                resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);
                String returnString = resp.toJSONString();
                return new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);
            }


            productReviewService.delete(review);


            resp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);



        } catch (Exception e) {
            LOGGER.error("Error while deleting category", e);
            resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);
            resp.setErrorMessage(e);
        }

        String returnString = resp.toJSONString();
        return new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);
    }

    protected long getMaxUploadableFileSize() {
        Long blcUploadSize = env.getProperty("asset.server.max.uploadable.file.size", Long.class);
        if (blcUploadSize != null) {
            return blcUploadSize;
        }

        if (defaultMultipartSettings != null) {
            return defaultMultipartSettings.createMultipartConfig().getMaxFileSize();
        }
        return DEFAULT_ASSET_UPLOAD_SIZE;
    }

}
