package fi.hut.soberit.agilefant.web;



import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.poi.ss.usermodel.Workbook;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionSupport;

import fi.hut.soberit.agilefant.business.AuthorizationBusiness;
import fi.hut.soberit.agilefant.business.BacklogBusiness;
import fi.hut.soberit.agilefant.business.ProductBusiness;
import fi.hut.soberit.agilefant.business.TimesheetBusiness;
import fi.hut.soberit.agilefant.business.TimesheetExportBusiness;
import fi.hut.soberit.agilefant.business.UserBusiness;
import fi.hut.soberit.agilefant.model.Backlog;
import fi.hut.soberit.agilefant.model.Product;
import fi.hut.soberit.agilefant.model.User;
import fi.hut.soberit.agilefant.security.SecurityUtil;
import fi.hut.soberit.agilefant.transfer.BacklogTimesheetNode;
import flexjson.JSONSerializer;

/**
 * 
 * @author Vesa Pirila / Spider
 * @author Pasi Pekkanen
 *
 */
@Component("timesheetAction")
@Scope("prototype")
public class TimesheetAction extends ActionSupport {

    private static final long serialVersionUID = -8988740967426943267L;
    
    @Autowired
    private TimesheetBusiness timesheetBusiness;
    
    @Autowired
    private TimesheetExportBusiness timesheetExportBusiness;

    @Autowired
    private UserBusiness userBusiness;
    
    @Autowired
    private BacklogBusiness backlogBusiness;
    
    @Autowired
    private ProductBusiness productBusiness;
    
    @Autowired
    private AuthorizationBusiness authorizationBusiness;
    
    private Set<Integer> productIds = new HashSet<Integer>();
    
    private Set<Integer> projectIds = new HashSet<Integer>();
    
    private Set<Integer> iterationIds = new HashSet<Integer>();
    
    private List<BacklogTimesheetNode> products;
    
    private DateTime startDate;

    private DateTime endDate;
    
    private String timeZoneString = "";
    
    private DateTimeZone timeZone;
    
	private String interval;
    
    private Set<Integer> userIds = new HashSet<Integer>();
        
    private boolean onlyOngoing = false;
    
    private long effortSum = 0;
    
    private ByteArrayOutputStream exportableReport;
    
    private String errorMessage = "";

    @Produces
    public String generateExeclReport(){
        Set<Integer> selectedBacklogIds = this.getSelectedBacklogs();
        if(selectedBacklogIds == null || selectedBacklogIds.size() == 0) {
            Collection<Product> products = new ArrayList<Product>();
            productBusiness.storeAllTimeSheets(products);
            for (Product product: products) {
                selectedBacklogIds.add(product.getId());
            }
        }        
        if (selectedBacklogIds.contains(0))
        {
            // Standalone Iterations
            selectedBacklogIds.remove(0);
            Collection<Backlog> iters = backlogBusiness.retrieveAllStandAloneIterations();
            for (Iterator<Backlog> i = iters.iterator();i.hasNext();){
                int backlogId = i.next().getId();
                if (checkAccess(backlogId)) {
                    selectedBacklogIds.add(backlogId);
                }
            }
        }
        Workbook wb = this.timesheetExportBusiness.generateTimesheet(this, selectedBacklogIds, startDate, endDate, timeZone, userIds);
        this.exportableReport = new ByteArrayOutputStream();
        try {
            wb.write(this.exportableReport);
        } catch (IOException e) {
            return Action.ERROR;
        }
        return Action.SUCCESS;
    }

}
